@page "/events"
@inject HttpClient Http

<PageTitle>Events</PageTitle>

<h2 style="text-align:center">Club Events</h2>
<br />
<h3>Upcoming (Next Two Events):</h3>

@if (events == null)
{
    <div class="spinner-border"></div>
}
else
{
    <ul>
        @{
            IEnumerable<Event> nextTwo = events.Where(e => e.Date > DateTime.Now).Take(2);
            foreach (Event e in nextTwo)
            {
                <li>
                    <b>@e.Date.ToString("MMMM d, h:mm tt")</b>
                    <br />
                    <b>@e.Title</b>
                    <br />
                    <b>Location: @e.Location</b>
                    <br />                   
                    @e.Description
                </li>
            }
        }
    </ul>
}
<br />
<h3>All Events:</h3>

@if (events == null)
{
    <div class="spinner-border"></div>
}
else
{
    <div class="row calendarHeader">
        <div class="col-sm-4">
        </div>
        <div class="col-sm-4">
            <span>@currentDate.ToString("MMMM yyyy")</span>
        </div>
        <div class="col-sm-4">
            <button disabled="@(currentDate > DateTime.Today.AddMonths(11))" class="btn btn-primary"
                    @onclick="() => ChangeMonth(1)">
                @($"{currentDate.AddMonths(1).ToString("MMM")} ")&#9205
            </button>
            <button disabled="@(currentDate == DateTime.Today)" class="btn btn-primary" @onclick="() => ChangeMonth(0)">Today</button>
            <button disabled="@(currentDate < DateTime.Today.AddMonths(-11))" class="btn btn-primary"
                    @onclick="() => ChangeMonth(-1)">
                &#9204@($" {currentDate.AddMonths(-1).ToString("MMM")}")
            </button>
        </div>
    </div>
    <div class="custom-table-responsive">
        <table class="table table-bordered calendar">
            <thead>
                <tr>
                    <th>Sun</th>
                    <th>Mon</th>
                    <th>Tue</th>
                    <th>Wed</th>
                    <th>Thu</th>
                    <th>Fri</th>
                    <th>Sat</th>
                </tr>
            </thead>
            <tbody>
                @* @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                } *@

                @{
                    day = DateOnly.Parse($"{currentDate.Month}, 1, {currentDate.Year}");
                    string dayString;

                    @while (day.Month == currentDate.Month)
                    {
                        <tr>
                            @if (day.Day == 1 && day.DayOfWeek != DayOfWeek.Sunday)
                            {
                                for (DayOfWeek i = 0; i < day.DayOfWeek; i++)
                                {
                                    <td></td>
                                }
                            }

                            @do
                            {
                                if (day.Month == currentDate.Month)
                                {
                                    dayString = day.ToString("MMM dd yyyy");
                                    int[] eventsTodayIndices = Enumerable.Range(0, events.Length)
                                                                         .Where(i => events[i].Date.ToString("MMM dd yyyy") == dayString)
                                                                         .ToArray();

                                    if (eventsTodayIndices.Length != 0)
                                    {
                                        <td class="eventDate" @onclick="() => BringUpModal(eventsTodayIndices)">
                                            <label>@day.Day</label>
                                            <br />
                                            <br />
                                            @foreach (int index in eventsTodayIndices)
                                            {
                                                <b>@events[index].Date.ToShortTimeString() - @events[index].Title</b>
                                                <br />
                                            }
                                        </td>
                                    }
                                    else
                                    {
                                        <td>
                                            <label>@day.Day</label>
                                        </td>
                                    }
                                }
                                else
                                {
                                    <td></td>
                                }
                                day = day.AddDays(1);
                            } while (day.DayOfWeek != DayOfWeek.Sunday);
                        </tr>                                        
                    }
                }
            </tbody>
        </table>

        <Modal Title="@($"{(modalEventIndices != null ? events[modalEventIndices[0]].Date.ToString("MMMM dd") : "")} Events")"
               Opened="openModal" CloseButtonClicked="() => openModal = false">
            <BodyContent>
                @if (modalEventIndices != null)
                {
                    <table class="table modalEventFirstCol">
                        @foreach (int index in modalEventIndices)
                        {
                            <tr>
                                <td><b>Title:</b></td>
                                <td>@events[index].Title</td>
                            </tr>
                            <tr>
                                <td><b>Location:</b></td>
                                <td>@events[index].Location</td>
                            </tr>
                            <tr>
                                <td><b>Time:</b></td>
                                <td>@events[index].Date.ToShortTimeString()</td>
                            </tr>
                            <tr>
                                <td><b>Description:</b></td>
                                <td>@events[index].Description</td>
                            </tr>
                        }                   
                    </table>
                    <br />
                    <br />
                    <br />
                }
            </BodyContent>
            <FooterContent>
                <button type="button" class="btn btn-danger" @onclick="() => openModal = false">Close</button>
            </FooterContent>
        </Modal>
    </div>
}

@code {
    private DateTime currentDate = DateTime.Today;
    private DateOnly day;
    private Event[]? events;
    private bool openModal = false;
    int[]? modalEventIndices;

    protected override async Task OnInitializedAsync()
    {
        events = await Http.GetFromJsonAsync<Event[]>("events-data/events.json");
    }

    private void ChangeMonth(sbyte direction)
    {
        currentDate = direction == 0 ? DateTime.Today : currentDate.AddMonths(direction);
    }

    private void BringUpModal(int[] eventIndices)
    {
        modalEventIndices = eventIndices;
        openModal = true;
    }

    public class Event
    {
        public DateTime Date { get; set; }
        public string? Title { get; set; }
        public string? Location { get; set; }
        public string? Description { get; set; }
    }

    // private WeatherForecast[]? forecasts;

    // protected override async Task OnInitializedAsync()
    // {
    //     forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    // }

    // public class WeatherForecast
    // {
    //     public DateOnly Date { get; set; }

    //     public int TemperatureC { get; set; }

    //     public string? Summary { get; set; }

    //     public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    // }
}